name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image and versions as they are.
    branches:
      - master
      - v*
  workflow_dispatch:
    branches:
      - master
      - v*    

env:
  IMAGE_NAME: github-actions-runner

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #  runs-on: [self-hosted, raspi, armhf]

  #  steps:
  #    - uses: actions/checkout@v2

  #    - name: Run tests
  #      run: |
  #        if [ -f docker-compose.test.yml ]; then
  #          docker-compose --file docker-compose.test.yml build
  #          docker-compose --file docker-compose.test.yml run sut
  #        else
  #          docker build . --file Dockerfile
  #        fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/

  push-github:
    runs-on: [self-hosted, raspi, armhf]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from branch name
          [[ "$VERSION" == "v"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  push-dockerhub:
    runs-on: [self-hosted, raspi, armhf]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into Dockerhub
        run: docker login -u pimageservice -p ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Push image to Dockerhub
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from branch name
          [[ "$VERSION" == "v"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          docker tag $IMAGE_NAME pimages/$IMAGE_NAME:$VERSION
          docker push pimages/$IMAGE_NAME:$VERSION